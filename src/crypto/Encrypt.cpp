#include "Encrypt.h"
#include "Dallas.h"
#include "Gost.h"
#include <Arduino.h>

//#pragma pack(push, 1)

typedef struct
{
    int magicNumber;
    uint8_t networkKey[9];
    uint8_t zeroByte1;
    uint8_t zeroByte2;
    uint8_t crc8;
} __attribute__((packed)) parcel_type;

//#pragma pack(pop)

uint8_t networkKey[9] = {
    0xcc, 0xae, 0xae, 0x40, 0x15, 0xd3, 0x12, 0x39, 0x28};

uint8_t lArray[256] = {
    0x0b, 0x6b, 0xf5, 0x4e, 0xb0, 0x44, 0xd6, 0x2a, 0x9e, 0x1a, 0x40, 0xc4, 0xe7, 0xa2, 0xd6, 0x99,
    0xd9, 0xd2, 0x5a, 0x30, 0x0c, 0x91, 0xda, 0x8a, 0xfc, 0x3f, 0xab, 0x47, 0xa4, 0x56, 0x88, 0x7a,
    0x7d, 0xc1, 0x03, 0x2f, 0x4f, 0x1d, 0x69, 0xcf, 0xf3, 0x5b, 0x48, 0xd4, 0x67, 0x8c, 0x7d, 0xb5,
    0xba, 0x12, 0x82, 0xe0, 0x3e, 0x9f, 0x52, 0x58, 0x31, 0x3d, 0x5b, 0x18, 0x9e, 0x73, 0x2a, 0xaa,
    0x35, 0x5e, 0xb1, 0x54, 0xec, 0x3f, 0x1a, 0x70, 0x5b, 0x0d, 0x7c, 0x7e, 0x7f, 0xac, 0x28, 0xb0,
    0xa9, 0xd2, 0xb1, 0x8b, 0x7b, 0xb3, 0xbc, 0x24, 0xa7, 0x1c, 0x8a, 0x8a, 0x08, 0x1b, 0x90, 0x53,
    0x4e, 0xf4, 0x6e, 0x44, 0x3d, 0xc7, 0x70, 0x00, 0x04, 0x79, 0x6f, 0xf8, 0x46, 0xb1, 0x6f, 0x49,
    0x60, 0xd5, 0xf0, 0xb1, 0x2d, 0xb3, 0x6f, 0x71, 0xae, 0x80, 0xfa, 0x26, 0xc9, 0x0f, 0x26, 0x56,
    0x82, 0x38, 0x60, 0x1c, 0x8c, 0x41, 0xbe, 0x2b, 0x04, 0x74, 0x5a, 0x11, 0x18, 0xb1, 0x3a, 0x12,
    0x67, 0x25, 0xc6, 0x3f, 0xba, 0x87, 0x53, 0x50, 0x9d, 0xbd, 0x85, 0xaf, 0xeb, 0xde, 0xbb, 0x15,
    0x6d, 0xc3, 0xf2, 0x72, 0x46, 0x23, 0x02, 0x3b, 0x74, 0x9d, 0xa9, 0xc0, 0x8a, 0x98, 0x38, 0x03,
    0x7a, 0x08, 0xb6, 0x82, 0xb5, 0xa1, 0x13, 0xb4, 0x0d, 0x74, 0x16, 0x02, 0x01, 0x22, 0x87, 0xac,
    0x4c, 0xb5, 0xd1, 0x2a, 0xd1, 0x5e, 0x13, 0x7a, 0x64, 0xc9, 0x2c, 0x93, 0x70, 0xdd, 0xfc, 0x92,
    0x1f, 0x7f, 0xc6, 0x61, 0x47, 0x84, 0x60, 0x95, 0x95, 0xc0, 0xce, 0xbc, 0x03, 0x9f, 0x30, 0x19,
    0xab, 0x81, 0xbf, 0xd7, 0x9c, 0xb9, 0x31, 0x2a, 0x24, 0x54, 0x3f, 0x8b, 0x78, 0xec, 0x49, 0x20,
    0x01, 0x6f, 0x51, 0x10, 0xa7, 0x68, 0xbc, 0xe0, 0xe4, 0x90, 0x70, 0x2c, 0x22, 0xdb, 0xf6, 0x25};

BLEUUID Encrypt::createParcelUuid(int magicNumber)
{
    log_i("magicNumber: %d", magicNumber);

    uint8_t buffer[16] = {};
    parcel_type &parcel = (parcel_type &)buffer;
    parcel.magicNumber = magicNumber;

    //memcpy(parcel.networkKey, networkKey, sizeof(networkKey));
    std::copy(std::begin(networkKey), std::end(networkKey), std::begin(parcel.networkKey));

    parcel.zeroByte1 = 0;
    parcel.zeroByte2 = 0;
    parcel.crc8 = Dallas::crc8(buffer, 0, 14);

    Gost gost(magicNumber);

    //std::reverse(std::begin(buffer.raw) + 2, std::begin(buffer.raw) + 10);
    uint64_t inputBlock = *(uint64_t *)(buffer + 2);
    Serial.print("Encrypt::createParcelUuid -> inputBlock: ");
    Serial.println(inputBlock, HEX);
    uint64_t outputBlock = gost.encrypt(inputBlock);
    Serial.print("Encrypt::createParcelUuid -> outputBlock: ");
    Serial.println(outputBlock, HEX);
    *(uint64_t *)(buffer + 2) = outputBlock;

    // Custom encryption
    uint8_t n = buffer[9];

    // fill 10 - 15 bytes
    for (int i = 10; i < 16; i++)
    {
        buffer[i] = buffer[i] ^ lArray[n];
        n++;
    }

    BLEUUID parcelUuid(buffer, sizeof(buffer), false);
    log_i("Parcel Uuid: %s", parcelUuid.toString().c_str());

    return parcelUuid;
}